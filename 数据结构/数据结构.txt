【配列】
一组在逻辑上和内存上连续相邻元素的集合，是线性数据结构。优点是随机访问速度快，
缺点是大小是固定的。

配列は論理的とメモリ上で隣接する要素の集合です、線形データ構造です。利点はランダムアクセスが速い、欠点はサイズが固定されます。

【連結リスト】
連結リストは、論理的には要素が連続していますが、メモリ上では必ずしも隣接しているわけではない線形データ構造です。サイズを動的に変更できるのが利点ですが、特定の要素にアクセスするには先頭から順番にたどる必要があるという欠点があります。

【スタック】
スタックは、後入れ先出し（LIFO）のデータ構造で、最後に追加された要素が最初に取り出されます。
主に関数の呼び出し管理や、一時的なデータの保持などに使われます。スタックは、再帰処理やバックトラックアルゴリズムなどにもよく使われます。

【ヒープ】
ヒープは、各ノードが特定の順序規則（親ノードが子ノードより大きいまたは小さい）に従う完全二分木です。
主に優先度付きキューの実装やヒープソートに使用されます。

【キュー】
キューは、先入れ先出し（FIFO）の線形データ構造で、最初に追加された要素が最初に取り出されます。主にタスクの管理、幅優先探索（BFS）などに使われます。

【二分木】
一个节点最多只能有左右两个子节点的树形结构。
ノードは最大で左右の2つの子ノードしか持てない木構造です。
二分探索木  
左子节点的值比父节点的值小，右子节点的值比父节点的值大。
左子ノードの値は親ノードより小さい、右子ノードは親ノードより大きい。

【赤黒木(akakuroki)】
红黑树是一种自平衡的二叉搜索树、它可以防止二叉搜索树退化成链表，能保持高效的查找效率。
有以下几个特点：
1、节点只能是红色或黑色节点。
2、根节点是黑色节点。
3、叶子节点都是黑色nil节点。
4、从任意一个结点到它的叶子节点的路径上所含有的黑色节点数目都相同。
5、红色节点的两个子节点都是黑色节点。
为了保持红黑树的特性，在插入和删除节点时候需要通过旋转和变色来维持特性。
赤黒木は自己バランス型の二分探索木です、二分探索木がリンクリストに変質するのを防ぎ(fusegi [0])、高効率の探索効率を保つことができます。
いくつかの特徴があります：
1、ノードは赤と黒ノードの一種しかない。
2、ルートノードは黒ノード。
3、葉ノードは黒nilノード。
4、任意のノードからその葉ノードまでのパス上に含まれる黒ノードの数はすべて同じです。
5、赤ノードの二つの子ノードは黒ノード

赤黒木の特徴を保つため、ノードの挿入と削除時には回転や色の変更を行う必要があります。






