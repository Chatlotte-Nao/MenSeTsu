【C# の実行方式】

C# の実行方式には JIT コンパイルと AOT コンパイルがあります。
JIT（即時コンパイル）は実行時に IL をネイティブコードに変換する方式で、柔軟ですが初回実行時にオーバーヘッドがあります。
AOT（事前コンパイル）はビルド時にILをネイティブコードへ変換する方式で、起動が速く iOS などの環境で利用できますが、動的コード生成には制限があります。
Unity では、Mono では JIT、IL2CPP では AOT が利用されています。

【IL2CPP の構成】
IL2CPP は二つの部分から構成されています。
一つ目は AOT コンパイラで、IL を C++ コードに変換します。
二つ目はランタイムライブラリで、GC、スレッド、ファイル処理、内部呼び出しによるデータ操作といったサービスを提供します。
これにより、IL2CPP はクロスプラットフォームで効率的に動作します。

【IL2CPP のメリット】
コード生成の性能が大幅に向上（Mono より最適化されたコードを生成）
エンジンコードストリッピング（Engine Code Stripping） により、不要なコードを削減しビルドサイズを小さくできる
実行効率が高く、Mono より高速
マルチプラットフォームへの移植が容易
【IL2CPP のデメリット / 制限】
ビルド時間が長い（Mono よりコンパイル工程が重い）