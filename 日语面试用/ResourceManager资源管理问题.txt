1、资源管理实现了什么？
首先创建一个AssetBundleLoader类、用来进行AssetBunde的加载和卸载，缓存已经加载出来的AssetBunde。
使用这个AssetBundleLoader进行AssetBundle加载时，会根据主AssetBundle的Mainfest获取这个AssetBundle的所有依赖AssetBundle,先将所有的依赖AssetBundle加载出来，并且每加载出一个AssetBundle，手动进行引用计数，标记这个AssetBundle的被引用次数加一，随后自己的引用计数也要增加一。
然后卸载一个AssetBundle时，会将自身的引用计数减一，如果引用计数为0的话，就将这个AssetBundle卸载掉。
然后在循环遍历自己的依赖资源、进行上述操作的递归调用，进行依赖资源的引用计数修改及卸载。

然后再实现一个ResourceManager类、使用主mainfest提供各种API进行各种类型的资源加载、分别处理编辑器模式下和AssetBundle模式下的资源加载方式。
再提供卸载AssetBundle资源的API进行卸载资源。

リソース管理は何を実現しましたか？

まず、AssetBundleのロードとアンロードを行い、ロードされたAssetBundleをキャッシュするためのAssetBundleLoaderクラスを作成します。AssetBundleLoaderを使用してAssetBundleをロードする際には、メインAssetBundleのマニフェストに基づいてそのAssetBundleのすべての依存AssetBundleを取得し、まずすべての依存AssetBundleをロードします。そして、各AssetBundleをロードするたびに、手動で参照カウントを行い、そのAssetBundleの参照カウントを1つ増やします。続いて、自分自身の参照カウントも増加させます。
次に、AssetBundleをアンロードする際には、自身の参照カウントを1つ減らします。もし参照カウントが0になった場合、そのAssetBundleをアンロードします。その後、自分の依存リソースをループで巡り、前述(zenjutsu)の操作を再帰的に呼び出して、依存リソースの参照カウントの修正とアンロードを行います。
次に、さまざまなタイプのリソースをロードするために、メインマニフェストを使用してさまざまなAPIを提供するResourceManagerクラスを実装します。エディターモードとAssetBundleモードのリソースロード方法をそれぞれ処理します。また、AssetBundleリソースをアンロードするためのAPIを提供し、リソースのアンロードを行います。

2、什么时候进行资源卸载？
场景切换的时候，释放未被使用的AssetBundle，进行一次GC。
同时会提供API供其他开发者判断是否要单独立即释放掉某个AB资源。
在不需要某项资源时，手动进行资源卸载。比如关闭一个界面的时候，会手动进行资源卸载。

いつリソースをアンロードしますか？

シーンを切り替えるとき、使用されていないAssetBundleを解放し、一回ガベージコレクションを行います。
同時に、他の開発者が特定のABリソースを即座(sokuza)に解放するかどうかを判断するためのAPIも提供します。
不要なリソースがある場合、手動でリソースをアンロードします。例えば、ある画面を閉じるときに手動でリソースをアンロードします。

【AssetBunde驻留优化】
对于频繁加载卸载的AssetBundle，建议将其加入缓存，常驻于内存中。

頻繁にロードとアンロードされるAssetBundleについては、キャッシュに追加し、メモリに常駐(jouchuu)させることをお勧めします。


【断点续传】 
下载AB文件会先下载到临时文件夹，全部AB文件下载成功后，再移动到persistentDataPath文件目录中。
AB文件是否加入下载列表要经过以下几个条件判断
判断persistentDataPath目录中是否存在该AB文件，如果存在证明之前下载过，无需加入下载列表。
判断StreamingAsset目录中是否存在该AB文件，如果存在证明打包时该AB文件已经在游戏包体里，无需加入下载列表。
如果该AB文件的下载类型是游戏内下载，或者边玩边下，那么不需要在游戏启动热更时下载，无需加入下载列表

检查该AB文件是否在临时文件夹中存在，如果不存在则跳过该AB文件的下载。
如果已存在，创建该临时下载文件的MD5，与下载清单中的MD5做对比，
如果MD5对比一致，则标记该AB文件数据为下载过。=


レジューム機能
ABファイルのダウンロードはまず一時フォルダーに行われ、すべてのABファイルのダウンロードが成功した後、persistentDataPathディレクトリに移動されます。

ABファイルをダウンロードリストに追加するかどうかは、以下の条件を判断する必要があります。

persistentDataPathディレクトリにそのABファイルが存在するかどうかを確認し、存在する場合は以前にダウンロードされたことを示しているため、ダウンロードリストに追加する必要はありません。

StreamingAssetディレクトリにそのABファイルが存在するかどうかを確認し、存在する場合はパッケージング時にすでにゲームパッケージに含まれていることを示しているため、ダウンロードリストに追加する必要はありません。

そのABファイルのダウンロードタイプがゲーム内ダウンロードまたはプレイしながらダウンロードの場合、ゲーム起動時のホットアップデートでダウンロードする必要はないため、ダウンロードリストに追加する必要はありません。

そのABファイルが一時フォルダーに存在するかどうかを確認し、存在しない場合はそのABファイルのダウンロードをスキップします。
既に存在する場合、その一時ダウンロードファイルのMD5を作成し、ダウンロードリストのMD5と比較します。MD5が一致する場合、そのABファイルのデータはダウンロード済みとしてマークされます。

Unload(false)和(true) 区别。
Unload(false):

仅卸载 AssetBundle 本身。
从该 AssetBundle 加载的对象（比如材质、贴图、预制体等）依然保留在内存中。
适用于需要保留已加载对象，但不再需要保留 AssetBundle 数据的情况。
Unload(true):

卸载 AssetBundle 并且同时卸载所有从该 AssetBundle 加载的对象。
适用于完全不再需要该 AssetBundle 及其加载对象的情况。
可以释放更多内存，但会导致从该 AssetBundle 加载的对象也被销毁。
具体选择哪种方式，取决于你的具体需求。如果你还需要使用从 AssetBundle 加载的对象，使用 Unload(false)；如果你希望完全释放内存，使用 Unload(true)。

Unload(false):

AssetBundle 自体のみをアンロードします。
その AssetBundle から読み込まれたオブジェクト（例えば、マテリアル、テクスチャ、プレハブなど）はメモリに残ります。
読み込まれたオブジェクトはそのまま使いたいが、AssetBundle のデータは保持したくない場合に使用します。

Unload(true):
AssetBundle と、それから読み込まれたすべてのオブジェクトをアンロードします。
AssetBundle およびその読み込まれたオブジェクトが完全に不要になった場合に使用します。
より多くのメモリを解放できますが、その AssetBundle から読み込まれたオブジェクトも破棄されます。


AssetBundle から読み込まれたオブジェクトをまだ使用したい場合は Unload(false) を使用し、完全にメモリを解放したい場合は Unload(true) を使用します。





