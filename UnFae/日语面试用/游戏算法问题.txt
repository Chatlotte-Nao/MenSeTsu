1、解释A星算法
A星算法的原理：A星算法是一种启发式的寻找最短路径的算法，从起点开始，遍历周围的点，记录自己是从哪个节点延伸过来的，放入一个关闭列表中，然后选出寻路消耗最小的，将它取出，放入开启列表中。
寻路消耗由f=g+h公式算出，g为离起点的距离，h为离终点的距离，有许多种估算离终点的距离的方法。通常用曼哈顿距离(水平距离加上垂直距离)，然后不断地重复该操作，直至关闭列表中包含了终点。然后将链表倒转，得到最短路径。

Aアルゴリズムは、最短経路を見つけるためのヒューリスティックなアルゴリズムであり、始点から始めて周囲の点を探索し、どのノードから延伸されたかを記録し、それをクローズドリストに入れ、最小の経路コストを持つものを選び、それを取り出してオープンリストに入れます。経路コストはf=g+hの式で計算され、gは始点からの距離、hは終点からの距離であり、終点までの距離を見積(mitsu)もるためのさまざまな方法があります。通常はマンハッタン距離（水平距離と垂直距離を加算(kasan)）が使用され、この操作をクローズドリストが終点を含むようになるまで繰り返します。その後、リンクリストを逆にして最短経路を得ます。

2、如何优化A星算法
选择一个合适的启发式函数。
使用堆来优化比较排序选出最小值的过程。
缓存已经计算过的节点的信息，避免重复计算。

適切なヒューリスティック関数を選択することが重要です。
ヒープを使用して最小値を取り出すプロセスを最適化します。
既に(sudeni)計算されたノードの情報をキャッシュし、重複計算を避けます。

3、有限状态机  FSM
实现对象的不同状态之间的切换。
每一个状态可以进行动作行为的发生。
同一时间只能有一个状态在运行。

オブジェクトの異なる状態間の切り替えを実現します。
各状態では動作が発生することができます。
同じ時間に実行されるのは一つの状態のみです。

4、分层状态机
将许多性质相同的状态组合成一个大状态，分层状态机控制这些大状态之间切换。
而每个大状态内部，又各自进行着状态切换。

多くの性質が同じ状態を一つの大きな状態にまとめ、階層(kaisou)型ステートマシンがこれらの大きな状態間の切り替えを制御します。
そして、各大きな状態の内部では、さらに状態遷移が行われます。

5、AI行为树
AI行为树由组合节点、修饰节点、条件节点、行为节点组成。
组合节点有顺序节点、平行节点、选择节点。
修饰节点有loop循环节点、not 置否节点。
条件节点起到判断条件的作用。
行为节点就是实际上执行具体行为的节点。

AIのビヘイビアツリーは、コンポジットノード、デコレータノード、コンディションノード、ビヘイビアノードで構成されています。
コンポジットノードには、シーケンスノード、パラレルノード、セレクタノードがあります。
デコレータノードには、ループノードとNOTノードがあります。
コンディションノードは条件を判断する役割を果たします。
ビヘイビアノードは実際に具体的な行動を実行するノードです。

