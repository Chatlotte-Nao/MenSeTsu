【C#的List和Array有什么区别 】
C#のListとArrayの違いは何ですか
【List不会产生装箱拆箱】
Listはボックス化やボックス化解除を発生させません。
【什么是GC】
GCは自動メモリ管理システムです。使用されなくなったオブジェクトを自動的に回収し、メモリ空間を解放してメモリリークを防ぐ役割を果たしています。
【如何减少GC】
GCを減らす方法
オブジェクトプールを使用し、過度なボックス化とボックス化解除を避け、stringの連結を減らし、定期的に手動でリソースをクリーンアップし、値型を使用します。その最も根本(konpon)的な目的は、ヒープスペースへのメモリ割り当て操作を減らすことです。
【GC的坏处】
GCの欠点
性能のコストによってアプリケーションの一時停止可能性があります、ガベージコレクションは不確定なため、特定の状況下(ka)ではGCの実行がアプリケーションのクラッシュを引き起こすことがあります。また、頻繁にメモリを回収すると、メモリの断片化が発生する可能性があります。
【GC原理】
GC（Garbage Collection）の原理
マーク - 使用されているオブジェクトをマークする。
削除 - マークされたオブジェクトが使用されなくなったとき、メモリを解放するために回収を行います。
【什么时候会进行GC】
いつGCが行われますか。
メモリプレッシャー：システムメモリが不足しているとき、ガベージコレクタは使用されなくなったオブジェクトのメモリを解放するためにガベージコレクションを開始し、メモリプレッシャーを軽減(keigen)します。
GC.Collect メソッド：開発者は System.GC.Collect メソッドを呼び出して明示的にガベージコレクションをトリガーすることができます。しかし、一般的には頻繁に手動でガベージコレクションを呼び出すことは推奨されません。なぜなら、それはパフォーマンスに影響を与える可能性があり、ガベージコレクタは通常、メモリを自動的に適切に管理できるからです。
オブジェクトが null に設定されると、ガベージコレクターはそのオブジェクトをある時点で回収する可能性があります。
【C#的闭包：】
C#のクロージャ
もしクラス内でクロージャが参照変数を捕捉(hosoku)している場合、そのクラスを手動で解放しない限り、その参照変数は長期間保持されます。この場合、クラスを明示的に null に設定する必要があります。

再把那边的添加过来一些



