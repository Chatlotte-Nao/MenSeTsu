1、Unity生命周期
Awake【起動】（オブジェクトが作成されたときに最初に実行され、一度だけ実行されます。）
当对象被激活时调用，并且可能会被多次调用。
OnEnable【有効化】（オブジェクトがアクティブ化されたときに呼び出され、複数回呼び出される可能性があります。）
只会执行一次。
Start【開始】（一度だけ実行されます。）
它以固定的物理时间间隔被调用，通常用于处理与物理相关的逻辑。
FixedUpdate【固定更新】（固定された物理時間間隔(kankaku)で呼び出され、通常、物理関連のロジックを処理するために使用されます。）
它每帧被调用一次。
Update【更新】（1フレームごとに呼び出されます。）
在 Update 之后被调用。
LateUpdate【遅延(chien)更新】（Updateの後に呼び出されます。）
当对象被禁用时调用，并且可能会被多次调用。
OnDisable【無効化】（オブジェクトが無効化されたときに呼び出され、複数回呼び出される可能性があります。）
当对象被销毁时调用
オブジェクトが破棄されたときに呼び出されます。
OnDestroy【破棄】（オブジェクトが破棄されたときに呼び出されます。）
2、DrawCall
CPUが描画(byouga)に必要なデータを用意し、GPUに1回のグラフィックス描画を通知(tsuuchi)するプロセス。
描画されるオブジェクトが増えるにつれて、Draw Callの数が増え、パフォーマンスに影響を与える可能性があります
Draw Call（描画呼び出し）の数を減らすことは、グラフィックスパフォーマンスの向上に寄与(kiyo)します。
3、IL2CPP
IL2CPPは、Unityのスクリプト実行エンジンであり、C#で書かれたスクリプトをC++に変換する役割を果たしています。Unityのスクリプト言語としてはC#が一般的に使用されていますが、実行時にはC++に変換され、ネイティブのマシンコードとして実行されることがIL2CPPの役割です
パフォーマンス向上:
- IL2CPPの使用により、実行時のパフォーマンスが向上することが期待されます。C++はネイティブなコードであり、実行時にジャストインタイム（JIT）コンパイラが不要なため、起動時間やメモリ使用量が削減(sakugen)されます。
プラットフォームのサポート:
- IL2CPPは複数のプラットフォームで動作し、iOS、Android、Windows、macOSなど、Unityがサポートする様々なプラットフォームで利用できます。