1、介绍本地化工作流程。
ローカリゼーションのワークフロー

首先是开发分支方式有两种。
一种是新创建一个本地化开发分支，需要定期合并主分支的内容，优点是当主分支开发的版本不稳定时，本地化分支可以选择性地合并内容。
保证本地化版本的稳定性。缺点是合并分支操作是一个繁琐，容易出错的过程，需要解决代码，资源上的冲突。
一种是和主版本处于同一个分支进行开发，这种开发模式的优点是不需要再进行合并，解决冲突，能够省去大量时间。
缺点是主版本的开发质量会很大程度影响本地化版本的稳定性、质量，因为没有合并这个操作了，多人同时提交资源，代码，难以一一Review。

整个工作流程包含有：对UI界面进行本地化开发，调整布局、代码动态设置，使得各语言文字不会超框。处理多语言图片字。
实现剧情文本的多语言读取，通过编写编辑器脚本，对剧情配置Excel下插入唯一LocalizeKey，运行时通过这个LocalizeKey读取
对应语言的翻译文本进行文本填充。
实现非剧情文本的多语言读取，编写一个UIText脚本，该脚本持有对应语言的字体，以及序列化的LocalizeType和LocalizeKey，
LocalizeType的话就是分功能来区分，比如一个商店命名为Shop，那么就会有一张ShopLocalize管理商店中所使用到的文字。
如果一些文字是静态的提前设置好LocalizeType和LocalizeKey即可，动态的话就需要代码进行设置。
实现本地化资源管理、实现切换语言功能。

まず、開発ブランチの方式には二つの方法があります。

一つは新しくローカライズ開発ブランチを作成する方法です。この方法では、定期的にメインブランチの内容をマージする必要があります。メリットは、メインブランチの開発バージョンが不安定な場合に、ローカライズブランチが選択(sentaku)的に内容をマージできることです。これにより、ローカライズバージョンの安定性が保証されます。デメリットは、ブランチのマージ操作が煩雑(hanzatsu)で、エラーが発生しやすく、コードやリソースの衝突を解決する必要があることです。
もう一つは、メインバージョンと同じブランチで開発を行う方法です。この開発方式のメリットは、マージや衝突の解決が不要で、大量の時間を節約できることです。しかしデメリットは、メインバージョンの開発品質がローカライズバージョンの安定性や品質に大きく影響することです。マージ操作がないため、多(ta)人数(ninzuu)が同時にリソースやコードをコミットすることになり、すべてをレビューするのが難しくなります。

全体のワークフローには以下の内容が含まれます：UI画面のローカライズ開発、レイアウトの調整(chousei)、コードの動的設定により、各言語の文字が枠()を超えないようにします。多言語画像の文字も処理します。
ストーリーテキストの多言語読み込みを実現するために、エディタースクリプトを作成し、ストーリー設定のエクセルにユニークなLocalizeKeyを挿入します。実行時にこのLocalizeKeyを通じて対応する言語の翻訳テキストを読み込み、テキストを埋め込み(umekomi)ます。
非ストーリーテキストの多言語読み込みを実現するために、UITextスクリプトを作成します。このスクリプトは対応する言語のフォントを持ち、シリアライズされたLocalizeTypeとLocalizeKeyも保持します。LocalizeTypeは機能ごとに区分(kubun)され、例えば商店を「Shop」と命名(meimei)する場合、ShopLocalizeが商店で使用される文字を管理します。いくつかの文字が静的であれば、LocalizeTypeとLocalizeKeyを事前に設定します。動的な場合は、コードで設定が必要です。
ローカライズリソース管理、言語切り替え機能も実現します。

2、如何实现本地化资源管理？
准备一个文件夹、这个文件夹下会有各语言的文件夹、各个语言文件夹下含有该语言的字体、翻译文本资源、图片资源等。

どのようにローカライズリソース管理を実現するか？
フォルダを準備し、そのフォルダ内に各言語のフォルダを配置します。各言語フォルダには、その言語のフォント、翻訳テキストリソース、画像リソースなどが含まれます。

3、如何实现切换语言功能？
切换语言主要涉及到对应语言文本的重新读取缓存，对应语言图片的重新加载，对应语言的特殊功能，通过UIText进行字体的切换和文字的赋值，通过LocalizePrefabHelper进行图片字切换。为了顺利完成语言切换，
会在切换语言后返回到游戏开始场景，重新执行一遍游戏开始的逻辑。

どのように言語切り替え機能を実現するか？
言語の切り替えは、主に対応する言語テキストの再読み込みとキャッシュ、対応する言語の画像の再読み込み、対応する言語の特殊機能に関連しています。UITextを通じてフォントの切り替えとテキストの割り当てを行い、LocalizePrefabHelperを使って画像文字を切り替えます。言語切り替えをスムーズに行うために、言語切り替え後はゲームの開始シーンに戻り、ゲーム開始のロジックを再度実行します。

UI界面本地化操作实际实现：
UI画面のローカライズ開発では、簡体字の2～3倍の文字数を原則として、直接Prefab上でUI要素のレイアウトを変更します（autosize、pivotの変更、layoutとcontentsizefilterの使用、9スライスの使用、elementの使用、画像とテキストの混在レイアウトの処理、必要に応じてコードの使用、LayoutRebuild.ForceRebuildLayoutImmediateの使用）。これにより、言語の文字数に応じて動的に変化し、文字が枠を超えないようにします。すべての親オブジェクトが表示状態である必要があり、非表示状態では再構築に含まれません。


