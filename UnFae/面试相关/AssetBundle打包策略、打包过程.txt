场景使用None方式构建 （待验证）
【1、为什么要使用AssetBundle？】
Unity中运行时加载资源的方式有Resource目录下的文件加载和AssetBundle文件的加载。
Resource目录下的文件会被打进包里，无法做资源热更新，而且会导致安装包变大。而
AssetBundle不需要打进包里也能使用，并且能压缩，资源热更新。
总的来说，AssetBundle就像传统的压缩包一样，由两个部分组成：包头和数据段。
包头包含有关AssetBundle的信息，比如标识符、压缩类型和内容清单。清单是一个以Objects name为键的查找表。每个条目都提供一个字节索引，
用来指示该Objects在AssetBundle数据段的位置。在大多数平台上，这个查找表是用平衡搜索树实现的。具体来说，Windows和OSX派生平台（包括iOS）都采用了红黑树。
因此，构建清单所需的时间会随着AssetBundle中Assets的数量增加而线性增加。
数据段包含通过序列化AssetBundle中的Assets而生成的原始数据。如果指定LZMA为压缩方案，则对所有序列化Assets后的完整字节数组进行压缩。
如果指定了LZ4，则单独压缩单独Assets的字节。如果不使用压缩，数据段将保持为原始字节流。
【2、AssetBundle三种压缩方式】
None:
完全不压缩资源。
LZMA:
压缩的资源最小，不过读取的时候解压速度最慢、而且解压出来的资源也最大
LZ4:
压缩的资源比LZMA大，不过读取的时候解压速度很快，而且解压出来的资源也没有很大。
通常用的都是LZ4，Unity中使用BuildAssetBundleOptions.ChunkBasedCompression进行设置
【3、AssetBundle打包策略】
AB包不应该打的太大，可以再细分。
三种资源路径可以不区分。只单独查找依赖
公共资源按照类别区分放置、随包或者首包资源时进行下载。
1、首先构建一份json文件、文件上包含不被打包文件夹路径、主要资源路径、被依赖资源路径。
不打包文件夹路径就是对应路径下不会被打成AssetBundle，被忽略掉。
主要资源路径就是确定哪些会被我们直接拿来使用加载的，通常是prefab之类。
被依赖路径就是确定哪些会被主要资源路径打包时所依赖的文件路径。
主要资源和被依赖路径会确定为，哪些文件夹下是按照文件后缀名单个文件打成一个AssetBundle，哪些文件夹下是整个文件夹下的资源打成一个AssetBundle。
然后确定好哪些类型的文件，要如何进行分配打包。
比如启动器的资源和后续热更新资源区分开来、再对热更新资源部分进行整体细分，每个UI界面Prefab资源单独打成一个AssetBundle，
一开始只下载部分关卡、后续的关卡当玩家访问该关卡时会弹出下载请求、事先确定好一个关卡所需要哪些资源，
这样做到玩家需要用到这个功能才进行下载，能够节省玩家的储存空间，大多数情况下玩过的内容、比如剧情关卡不会再去回顾。
当然也会提供一次性全部下载热更新资源的功能。
【4、如何避免重复打包】
在打包主要资源路径下的资源时，会查找该资源的依赖文件收集GUID，将GUID存放进一个哈希表里。然后将自己设置好AB文件名存入一个哈希表里，这个
哈希表以AB包名作为Key值，然后遍历被依赖路径时，使用GUID哈希表判断是否在这个哈希表中，然后再判断AB包名是否已经在AB包名哈希表里，使用两个哈希表防止重复打包。
【5、打完AB包创建清单文件用来热更新使用】
利用构建AssetBundle得到的主包获取所有AssetBundle的信息。创建一份文件、
文件上记录了当前资源版本号、所有AssetBundle的名字、文件路径、MD5、文件大小。这份文件主要用来资源更新使用。
以及标记AssetBundle是否需要首包下载，标记这个AssetBundle属于哪个AssetBundle附带的资源跟随这个AssetBundle一起进行下载，
热更新会先下载资源清单与本地清单进行比较再决定需不需要下载资源。
【6、如何进行需要时下载】
再使用一份策略文件，里面记录下载一个资源时，需要附带下载哪些资源，就比如加载一个界面Prefab资源时，如果这个prefab还没有被下载的话，会请求下载，这个界面Prefab需要动态加载一些图片、这些图片就是附带资源，
这个界面Prefab资源就是加载入口，加载这个界面Prefab的时检查有哪些附带资源，一起进行下载。
在创建清单文件时，标记AssetBundle是否需要首包下载，这个也通过策略文件进行决定，然后记录是否已经下载了防止重复下载，如果MD5变化了的话再下载。

面试问题：
1、如何解决AB包循环引用问题？

避免直接循环依赖: 在打包资源时，尽量避免让两个AB包互相引用。可以通过拆分资源、重新设计资源的依赖关系来避免循环引用。
减少Prefab嵌套层级：
避免过多层级的嵌套，减少复杂的引用链。

单向依赖: 确保AB包的引用关系是单向的，即一个AB包只能引用另一个，而不能反过来。

工具检测: 使用自定义脚本或第三方工具，检查AssetBundle的依赖关系，在打包之前发现并解决循环依赖的问题。

在加载时处理循环引用：
手动管理AssetBundle的加载顺序，确保先加载那些没有循环依赖的包，再加载依赖其他包的资源。

最优解应该是在打包阶段就避免循环依赖。



