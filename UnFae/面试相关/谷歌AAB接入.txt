1、谷歌AAB是什么？
全称Android App Bundle，是一种谷歌商店上架发布包体的格式。
通过Play Asset Delivery进行资源分发、有三种分发模式
分别是install-time(安装时分发)、fast-follow(快速跟进式分发)、on-demand(按需分发)
install-time的资源相当于安装包出包时附带着的首包资源，用户安装的时候资源就在里面了。
资源最多只能放1GB。
fast-follow的资源会在用户安装应用后立即自动下载，可以认为是首包热更资源。on-demand的资源则在应用中手动请求资源下载时候进行下载。
fast-follow和on-demand的资源都是通过谷歌提供的服务来进行下载的，需要额外逻辑处理，并且网速不可控，不如使用cdn自行下载热更新资源。
所以只使用install-time方式，放置一部分首包资源。同时AAB的大小是由APK(150MB以内)加上install-time资源部分(1GB以内)共同决定，不可超出150MB和1GB的大小限制，
否则将被谷歌商店拒绝。

2、资源配置方式
启动界面的资源、热更新界面资源、热更新前的各种资源都需要放在apk包内或者install-time资源中。生成一份序列化文件，随包构建。标记哪些资源是属于
install-time，哪些资源属于首次热更新需要下载、剩下的资源就是后续玩家有需要下载时才下载的资源。

3、正式实现逻辑
去官网下载Unity用的谷歌插件。生成一份序列化文件、标记本次打包的格式是否为AAB格式，
与大陆APK模式区分开来，放在Resource目录下，随包构建。
然后把install-time的资源放在一个文件夹下，调用API生成一个AssetPackConfig，
设置模式为InstallTime,这种做法的话到时候去加载install-time的资源时，需要手动拼接路径、
路径名为jar::file://{Application.dataPath}!assets/{1}/{2},assetpack。
因此可采用该这种做法，
调用API生成一个AssetPackConfig，AssetPackConfig.SplitBaseModuleAssets=true;
将这个属性设置为true后，同时再将Install-time的资源放在StreamingAssets下，
之后就能通过Application.streamingAssets的方式进行资源的路径查找。
随后再使用AppBundlePublisher.Build() API进行AAB格式构建,便完成了AAB构建流程。

4、AAB接入中遇到的一些问题。
sdk api level需要大于等于30，不然无法构建。
需要进行升级安卓SDK。

打过AAB之后再打APK打不出来。
EditorUserBuildSettings.buildAppBunlde这个bool变量只有打AAB的时候才设置为true，
APK的时候需要设置为false。

打包带入简体资源导致变大