1、解释A星算法
A星算法的原理：A星算法是一种启发式的寻找最短路径的算法，从起点开始，遍历周围的点，记录自己是从哪个节点延伸过来的，放入一个开启列表中，然后选出寻路消耗最小的，将它取出，放入关闭列表中。
寻路消耗由f=g+h公式算出，g为离起点的距离，h为离终点的距离，有许多种估算离终点的距离的方法。通常用曼哈顿距离(水平距离加上垂直距离)，然后不断地重复该操作，直至关闭列表中包含了终点。然后将链表倒转，得到最短路径。

A*アルゴリズムは、最短経路を見つけるためのヒューリスティックな探索手法です。始点から周囲のノードを探索し、どのノードから遷移(sen i[1])したかを記録してオープンリストに入れ、最小のコスト f=g+h を持つノードを選んでクローズドリストに移動します。ここで g は始点からの実際の距離、h は終点までの推定距離です。h の計算にはさまざまな方法がありますが、一般的にはマンハッタン距離（水平距離と垂直距離の和）が用いられます。この処理を、クローズドリストに終点が含まれるまで繰り返します。その後、各ノードを逆に辿ることで最短経路を復元します。

2、如何优化A星算法
选择一个合适的启发式函数。
使用堆来优化比较排序选出最小值的过程。
缓存已经计算过的节点的信息，避免重复计算。
AStarの最適化
適切なヒューリスティック関数の選定が重要です。
最小要素の取得は、優先度付きキュー（ヒープ）で最適化します。
計算済みノードの情報をキャッシュして、再計算を避けます。

3、有限状态机  FSM

有限状態機械は、ある瞬間に一つの状態を持ち、条件によって他の状態に遷移する仕組みです。
Unity ではキャラクター AI や UI 遷移などに使われ、実装は switch 文やステートパターンで行うことが多いです。

4、分层状态机
将许多性质相同的状态组合成一个大状态，分层状态机控制这些大状态之间切换。
而每个大状态内部，又各自进行着状态切换。

階層型ステートマシンでは、共通する性質を持つ状態をグループ化して大きな状態になって、大きな状態同士の遷移と、その内部の個別状態の遷移を両方管理できます。

5、AI行为树
AI行为树由组合节点、修饰节点、条件节点、行为节点组成。
组合节点有顺序节点、平行节点、选择节点。
修饰节点有loop循环节点、not 置否节点。
条件节点起到判断条件的作用。
行为节点就是实际上执行具体行为的节点。

AIのビヘイビアツリーは、コンポジットノード、デコレータノード、コンディションノード、ビヘイビアノードで構成されています。
コンポジットノードには、シーケンスノード、パラレルノード、セレクタノードがあります。
デコレータノードには、ループノードとNOTノードがあります。
コンディションノードは条件を判断する役割を果たします。
ビヘイビアノードは実際に具体的な行動を実行するノードです。

1、包围盒碰撞检测

基本思想是检查两个包围盒的坐标轴投影是否有重叠。如果在任何一个坐标轴上，一个包围盒的最小点大于另一个包围盒的最大点，
或者一个包围盒的最大点小于另一个包围盒的最小点，那么两个包围盒在该轴上没有重叠，即不相交。反之，如果在所有坐标轴上都存在重叠，那么可以认为两个包围盒相交。

这种方法的优势在于简单且计算效率较高。缺点是可能存在一定的误差，尤其是对于细长形状的物体。

2、SAT分离轴定理
分离轴定理（Separating Axis Theorem，SAT）是一种用于检测凸多边形或凸多面体之间是否相交的算法
。SAT 的核心思想是基于一个观察：如果两个凸形状不相交，那么一定存在一条直线，这条直线称为“分离轴”，沿该直线投影两个形状的投影区间不会重叠。
无法适用于凹多边形，因为找不到这条分离轴。

3、四叉树和八叉树

四叉树是一种将二维空间划分为四个象限的树状数据结构。每个节点都有四个子节点，分别代表了空间的四个象限。通常，四叉树用于处理二维空间中的数据。以下是四叉树的主要特点和应用：

结构： 每个节点可以有零至四个子节点。节点的深度决定了空间的划分层数。

应用： 主要用于二维空间的地理信息系统、碰撞检测、图像处理等领域。例如，用于对游戏场景中的物体进行空间索引和查询。

优点： 简单、易于实现。适用于处理平面上的空间数据。

缺点： 在处理三维空间时，需要使用多个四叉树进行建模，可能会导致复杂性增加。

八叉树是一种将三维空间划分为八个均匀的子空间的树状数据结构。每个节点有八个子节点，分别代表了空间中的八个子空间。八叉树通常用于处理三维空间中的数据。以下是八叉树的主要特点和应用：

结构： 每个节点可以有零至八个子节点。节点的深度决定了空间的划分层数。

应用： 主要用于三维空间中的地理信息系统、计算机图形学中的场景管理、物理引擎中的碰撞检测等。例如，用于对三维模型、游戏场景等进行空间索引和查询。

优点： 适用于处理立体空间中的数据，可以有效地组织和查询三维数据。

缺点： 相对于四叉树，处理二维平面上的数据时可能显得过于复杂。

