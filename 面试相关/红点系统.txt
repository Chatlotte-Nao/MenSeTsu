整个红点管理系统主要有三个部分组成：
红点管理类：
红点管理类是一个管理所有红点树的接口，方便进行对红点的管理。
首先是创建红点逻辑树，通过读取配置表中的红点数据，递归生成一个个红点逻辑类，然后把存在父子关系的红点逻辑类关联起来。然后当我们需要绑定红点的时候提供接口把红点与UI控件绑定，同时提供接口解绑和更新红点的数量。
红点逻辑类：
红点逻辑类主要是控制某一个红点的逻辑，记录其父子结点以及当前显示红点的状态，把自己与红点UI类给绑定起来，然后根据自身的状态控制红点UI类的显示。
红点UI类：
对预制体上的红点节点进行控制，控制红点UI的显示隐藏，偏移等UI相关的操作。

红点管理类提供对外接口，管理各个红点逻辑类。各个红点逻辑类记录着自己的父亲，孩子结点，红点数量显示状态等信息，由此来控制着红点UI类的显示。


红点系统：
主要由RedDotBaseNode、RedDotManager、RedDotService三个类组成。
RedDotBaseNode就是红点树结构中的每个节点，持有对应的红点ID值，
父节点的引用，子节点列表，把自己与具体某个预制体节点上的红点UI绑定起来，然后根据自身的状态控制对应红点UI的显示隐藏。
RedDotManager为主要逻辑处理类，持有所有红点的缓存，内有各种方法处理红点关系。
RedDotService主要给外部类使用，提供绑定解绑红点等方法。

这三个类结合主要工作流程如下：
首先客户端会将用到的所有红点以枚举的形式记录在一个配置文件里，同时会标记红点对应的父节点的红点ID值，红点管理类根据配置文件，
创建出配置文件写到的红点逻辑类，并将存在父子关系的红点逻辑类关联起来。客户端在对应的界面类中，绑定好对应的红点ID和对应的红点UI节点，在需要更新红点UI的状态时，调用RedDotService提供的刷新红点UI状态方法进行红点UI的控制。


