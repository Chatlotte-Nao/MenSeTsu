IOS包审核时，不允许有热更新下载。谷歌没有这个限制。把打包代码中用到的API流程记录一下
1、介绍本地化工作流程。
首先是开发分支方式有两种。
一种是新创建一个海外开发分支，需要定期合并主分支的内容，优点是当主分支开发的版本不稳定时，海外分支可以选择性地合并内容。
保证海外版本的稳定性。缺点是合并分支操作是一个繁琐，容易出错的过程，需要解决代码，资源上的冲突。
一种是和主版本处于同一个分支进行开发，这种开发模式的优点是不需要再进行合并，解决冲突，能够省去大量时间。
缺点是主版本的开发质量会很大程度影响海外版本的稳定性、质量，因为没有合并这个操作了，多人同时提交资源，代码，难以一一Review。

整个工作流程包含有：对UI界面进行本地化开发，调整布局、代码动态设置，使得各语言文字不会超框。处理多语言图片字。
实现剧情文本的多语言读取，通过编写编辑器脚本，对剧情配置Excel下插入唯一LocalizeKey，运行时通过这个LocalizeKey读取
对应语言的翻译文本进行文本填充。
实现非剧情文本的多语言读取，编写一个UIText脚本，该脚本持有对应语言的字体，以及序列化的LocalizeType和LocalizeKey，
LocalizeType的话就是分功能来区分，比如一个商店命名为Shop，那么就会有一张ShopLocalize管理商店中所使用到的文字。
如果一些文字是静态的提前设置好LocalizeType和LocalizeKey即可，动态的话就需要代码进行设置。
本地化资源管理、实现切换语言功能、本地化版本出包。

2、如何实现本地化资源管理？
准备一个文件夹、这个文件夹下会有各语言的文件夹、各个语言文件夹下含有该语言的字体、翻译文本资源、图片资源等。
3、如何实现切换语言功能？
切换语言主要涉及到对应语言文本的重新读取缓存，对应语言图片的重新加载，对应语言的特殊功能，通过UIText进行字体的切换和文字的赋值，通过LocalizePrefabHelper进行图片字切换。为了顺利完成语言切换，
会在切换语言后返回到游戏开始场景，重新执行一遍游戏开始的逻辑。
4、如何实现本地化版本出包？
构建AB时，将本地化资源添加进去，一起进行AB构建。构建完AB后需要将不包含在该包中的语言资源剔除掉，如果是IOS出包的话，
和大陆版本出包并无区别，只是多了多语言部分的资源，其他的加载逻辑并无变化。
而如果是安卓出包的话，则需要接入谷歌的AAB，需要构建两份序列化文件放进Resource目录下，随包构建。
一份序列化文件里面保存这次打包的格式是APK还是AAB，一份序列化文件保存哪些资源是Installtime资源，哪些资源是首包热更文件
，哪些资源是请求下载资源。加载资源的逻辑也要根据这个文件有所调整。

---自动化流程，通过脚本来排查

1、本地化分支的管理、进行主版本开发内容合并。解决代码冲突，资源冲突只能抛弃修改保留主版本，只能通过人力协商维护。
使用本地化宏来进行代码区分。后期又变成一个分支。
2、创建各语言的文件夹进行各语言的资源管理，文件夹下放置字体、图片字资源，各语言图片资源的相对路径保持一样。
2、UI界面的本地化开发，以2到3倍简中文字原则，直接在Prefab上修改UI元素的布局(autosize,改pivot，使用layout和contentsizefilter，切九宫格、使用element
，图文混排综合使用layout和contentsizefilter处理，实在不行还得用代码，使用LayoutRebuild.ForceRebuildLayoutImmediate，需要所有的父物体都是显示状态。隐藏状态不会加入重建)，使得能跟随语言文字长度进行动态变化。
防止文字出现超框情况，编写脚本处理图片字资源，只需要提前拖拽获取Image的路径，在第一次显示UI界面前就会替换成对应语言的图片。
3、使用本地化LocalizeKey来进行翻译文本的使用管理，对应功能的有一份LocalizeExcel填充key值，以及各语言翻译。
比如商店功能所使用到的文字的话，就会在一个叫ShopLocalize的Excel里面进行填写管理。
4、编写编辑器工具进行辅助本地化处理，比如剧情配置Excel里面没有添加本地化Key，只写了中文的文本，
编写编辑器工具，实现在所有剧情配置Excel里面插入一列数据，并以当前Excel的名字和当前Excel的Sheet名字以及该条数据的ID进行唯一本地化LocalizeKey生成。
再随之使得自己的代码嵌入剧情加载逻辑中，加入多语言翻译文本读取逻辑。
编写编辑器工具，筛选当前资源Prefab中挂载了UIText脚本的，UIText脚本用来设置Content还是Title字体。使用了文字的地方必定要挂在UIText脚本。
但是没设置Key，以及使用TextMeshPro但是没有挂载UIText的部分导出成一份Excel文件记录下来，并且填写上预制体的路径，以及对应的UI节点路径。
编写编辑器脚本，使得开发人员在保存Prefab时，检测一下是否没有设置Key，弹出警告提示开发人员如果这不是动态赋值的文字的话需要进行Key值的填写。
编写编辑器脚本，检查资源各个语言资源是否有缺失和冗余。
5、如果海外运营有其他功能需求，也会对应进行功能开发，比如海外想了个抽卡角色第一次登陆弹出视频PV。
6、对安卓包体接入谷歌AAB格式，IOS无需调整，苹果商店没有特殊要求，IOS包体不能超过4个G。出包过程
7、安卓studio安卓aar和IOS plist的使用。
8、LQA流程、LQA BUG修改，语言专家校验。三倍模式QA提前跑测
9、商店上架审核过程、Google审核机审、IOS审核期间不允许有热更新。
10、线上维护、周更。
11、打包过程中遇到的问题：
12、包体名多语言、
资源过大、打包时未加入简中字体、导致每一份Prefab都带入了简中字体。超过4个G了
卡在BuildAB阶段、谷歌AAB插件的Samples没删除掉，编译没通过脚本。
BuildAPPBundle只有打AAB时才需要勾选，打APK得时候需要取消掉。
分支切换导致的打包机资源文件发生变化，导致热更变大，线上采用专门的打包机一台，首次构建时清除AB，
之后就不切换分支了，保证增量打资源的准确性。
打包机需要有翻墙软件、打包时会访问外国网，特别是Gradle构建需要翻墙
打AB包时间过长且无法结束，登陆mac打包机提示内存不足，只有16G太小了。Memory consumption went from 10.67GB to 10.67GB。
C#在有些国家语言中，字符串里面如果是0.5的话，使用float.parse时，会转化为0,5这种情况下就会导致无法计算游戏崩溃。
可以在计算小数时，分拆前后加起来。还有使用代码强制游戏主线程为英语环境。
System.Globalization.CultureInfo.DefaultThreadCurrentCulture = new System.Globalization.CultureInfo("en-US");
覆盖安装，出现材质丢失，因为原逻辑是先加载部分启动界面资源，后执行版本检查。
覆盖安装情况下，启动后加载了热更目录下部分上个版本的资源（文本、shader）
由于ob1到ob2经历了unity版本升级、shader打包逻辑调整
新包不能正常加载旧版本unity构建的资源，也找到不到旧版资源所依赖的shader，导致该问题
。
将版本检查下载资源提前至任何资源加载之前。
除0导致闪退，获取到安卓日志查询发现是数学相关的报错。








【---------】

还会问开发流程。PM、策划什么的。

1、能够进行游戏性能、包体优化。
2、能够知晓安卓IOS原生端的调试看BUG、熟悉安卓IOS打包上架流程。
3、海外游戏打包上架、完整游戏上线经验。
4、负责SDK接入、数据埋点。
5、功能模块开发维护、解决线上BUG。
6、自动化编辑器脚本
