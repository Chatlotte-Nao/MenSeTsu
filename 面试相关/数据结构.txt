1、数组
数组是一种线性数据结构，在物理内存上是连续的，数组的优点是随机访问非常快速、
但是大小是固定的。
2、链表
链表是一种线性数据结构、在物理内存上不一定是连续的，由节点组成、每个节点包含数据和指向下一个节点的引用。
链表可以用于动态分配内存，但在访问元素时需要从头部开始遍历。
3、栈
栈是一种后进先出的数据结构，主要操作包括压栈和出栈、用于实现函数调用等。
4、队列
队列是一种先进先出的数据结构、主要操作包括入队和出队，用于处理任务调度、广度优先搜索等。
5、二叉树
二叉树（Binary Tree）是一种树状数据结构，其中每个节点最多有两个子节点，
通常称为左子节点和右子节点。这两个子节点分别代表树的左子树和右子树。
6、二叉搜索树
左子树上的节点值小于根节点的值，右子树上的节点值大于根节点的值。
7、哈希表
哈希表是一种用于存储键值对的数据结构、通过哈希函数将键映射到特定的索引位置，
以实现快速的数据查找。


面试问题：
1、Dictionary实现原理，底层是什么数据结构。

Dictionary<TKey, TValue> 是一个强大且高效的数据结构，适用于需要快速查找和存储键值对的场景。它依赖于哈希表的实现，通过哈希函数、桶(数组)、链表和扩容机制来提供高效的增删改查操作。

哈希表的基本结构
哈希函数：Dictionary 使用键的哈希码来确定值在内部数组中的存储位置。通过 GetHashCode 方法获取键的哈希码。
桶（Buckets）：哈希表内部维护一个数组（称为桶）。每个桶包含链表的引用，用来处理哈希冲突。
链表：在某个桶中可能有多个键值对，这种情况发生在不同键的哈希码相同或哈希码不同但通过哈希函数映射到同一个桶中。这些键值对以链表的形式存储在该桶中。

哈希冲突
冲突解决：当两个键具有相同的哈希码时，或不同哈希码映射到相同的桶中时，会发生冲突。C# 的 Dictionary 使用链地址法（Separate Chaining）解决哈希冲突，即每个桶中存储一个链表，冲突的元素会添加到这个链表的末尾。

扩容（Resizing）：当 Dictionary 中的元素数量超过一定比例时（通常是负载因子为0.75时），哈希表会进行扩容，将桶数组的大小翻倍。扩容时需要重新计算所有键的哈希码并将它们重新分配到新的桶位置，这个过程称为重哈希（Rehashing）。
重哈希：在扩容后，需要重新计算所有键的哈希值并放入新的桶中。扩容是一项开销较大的操作，因此 Dictionary 会尽可能避免频繁的扩容。