【バブルソート】
バブルソートは隣り合う要素を比較して交換し、少しずつ並び替える方法です。
大きな値が後ろに移動します。計算量はO(n²)【オー エヌ じじょう】です。

【クイックソート】
クイックソートは「分割統治法」を使ったソートアルゴリズムです。
まず基準となる要素（ピボット）を一つ選び、それより小さい要素と大きい要素に分けます。
その後、部分配列ごとに同じ処理を再帰的に繰り返すことで、全体を整列させます。
平均的な計算量は O(n log n)、最悪の場合は O(n²) になります。

【マージソート】
マージソートは「分割統治法」を利用したソートアルゴリズムです。
配列を半分に分割し、それぞれを再帰的に整列させ、最後に二つの整列済みの配列をマージして一つにまとめます。計算量は、最悪・平均ともに O(n log n) です。

【BFS(幅優先探索、最短経路問題)】
将起点加入队列，并标记该顶点已被访问。将顶点从队列中取出，并将其相邻的顶点加入队列，对尚未访问的顶点进行标记。重复此过程，直到队列为空为止。
始点をキューに追加し、その頂点を訪れた(otozure)こととマークします。
キューから頂点を取り出し、その隣接頂点をキューに追加し、まだ訪れていない頂点は訪れたこととマークします。キューが空になるまでこのプロセスを繰り返します。最短経路問題などに利用されます。

【ＤFS(深さ優先探索、最短経路問題)】
将起点加入栈中，并标记该顶点已被访问。从栈中取出顶点，并将其相邻的顶点加入栈中，对尚未访问的顶点进行标记。重复此过程，直到栈为空为止。
始点をスタックに追加し、その頂点を訪れたこととマークします、
スタックから頂点を取り出し、その隣接頂点をスタックに追加し、まだ訪れていない頂点を訪れたこととマークします。スタックが空になるまでこのプロセスを繰り返します。最短経路問題などに利用されます。

【動的計画法(DP)】
拆分子问题、记住过往、减少重复计算。
典型特征是：最优子结构、状态转移方程、边界、重叠子问题。
問題を分割し、過去を覚え、重複計算を減らします。
典型的な特徴には、最適な部分を構造、状態遷移方程式、境界、
重複する部分問題があります。

【ダイクストラ法(Dijkstra)】
从起点开始寻找出到达终点的最短路径。
首先需要两个数组S和U，S的作用是记录已求出最短路径的顶点(以及相应的最短路径长度)，而U则是记录还未求出最短路径的顶点(以及该顶点到起点的距离)
初始时，数组S中只有起点D，数组U中是除起点D之外的顶点，并且数组U中记录各顶点到起点D的距离。如果顶点与起点D不相邻，距离为无穷大。然后，从数组U中找出路径最短的顶点K，并将其加入到数组S中，同时，从数组U中移除顶点K。接着，更新数组U中的各顶点到起点D的距离。重复上述操作，直到遍历完所有顶点。

始点から終点への最短経路を見つけるために、まずSとUという二つの配列が必要です。Sの役割は、
最短経路が既に求められた頂点を記録することであり、Uはまだ最短経路が求められていない頂点を記録します。
初期状態では、配列Sには始点Dしか含まれず、配列Uには始点D以外のすべての頂点を含まれ、配列Uには
各頂点から始点Dまでの距離が記録されています。頂点が始点D隣接していない場合、距離は無限大です。
その後、配列Uから最も短い経路の頂点K見つけ、それを配列Sに追加し、同時に配列Uから削除します。その後、
配列U内の各頂点から始点Dまでの距離を更新します。これらの操作を繰り返し、すべての頂点を探索するまで続けます。